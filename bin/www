var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
// var port = normalizePort(process.env.PORT || '9000');
// app.set('port', port);
var server = http.createServer(app);
const firebase = require('firebase');
const firebaseConfig = require('../routes/firebaseConfig')
const db = firebase.database()
const cron = require('node-cron');
const serverless = require('serverless-http')

server.listen(port, () => {
  console.log(`Server is on port:${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
function runAtMidnight() {
  const productsRef = db.ref('/product');
  productsRef.once('value', (snapshot) => {
      const product = snapshot.val();
      const randomIndex = Math.floor(Math.random() * product.length);
      const dailyProduct = product[randomIndex];
      const dailyProductRef = db.ref('dailyProduct');
      dailyProductRef.set(dailyProduct, (error) => {
          if (error) {
              console.error('Error setting daily product:', error);
          } else {
              console.log(`Set daily product to ${dailyProduct.id}`);
          }
      });
  });
}

cron.schedule('0 0 * * *', async function () {
  console.log('run')
  runAtMidnight()
});

module.exports.handler = serverless(app)