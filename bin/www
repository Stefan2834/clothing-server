var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);
var server = http.createServer(app);
const cron = require('node-cron');
const mongoose = require("mongoose");
const { Product, Daily } = require('../routes/Schema')

const { sendNewsLetterEmail } = require('../routes/email')

const connect = async () => {
  try {
    await mongoose.connect("mongodb+srv://Stefan:7iGe3MbcfiNC0vk7@cluster0.vlhvegc.mongodb.net/", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    console.log("Connected to MongoDB");
  } catch (err) {
    console.error("Error connecting to MongoDB:", err);
  }
}
var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);


server.listen(port, async () => {
  await connect()
  console.log(`Server is on port: ${port}`)
});
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
const runAtMidnight = async () => {
  try {
    const products = await Product.find({});
    const randomIndex = Math.floor(Math.random() * products.length);
    const dailyProduct = products[randomIndex];
    await Daily.findOneAndUpdate({}, { id: dailyProduct.id }, { upsert: true });
    sendNewsLetterEmail(19, { id: dailyProduct.id })
    console.log(`Produsul zilei este: ${dailyProduct.id}`)
  } catch (err) {
    console.error(err)
  }
}
cron.schedule('0 0 * * *', async function () {
  runAtMidnight()
});